import { useState, useEffect } from 'react';
import { sampleBooks } from './data/sampleBooks';
import BookForm from './components/Book/BookForm';
import FilterBar from './components/Book/FilterBar';
import BookList from './components/Book/BookList';
import BookStats from './components/Book/BookStats';
import './App.css';

function App() {
  // L·∫•y d·ªØ li·ªáu t·ª´ localStorage ho·∫∑c s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u n·∫øu kh√¥ng c√≥
  const [books, setBooks] = useState(() => {
    const savedBooks = localStorage.getItem('books');
    return savedBooks ? JSON.parse(savedBooks) : sampleBooks;
  });

  const [newBook, setNewBook] = useState({
    title: '',
    author: '',
    genre: '',
    year: ''
  });
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedGenre, setSelectedGenre] = useState('');
  const [genres, setGenres] = useState([]);

  // Tr√≠ch xu·∫•t t·∫•t c·∫£ c√°c th·ªÉ lo·∫°i duy nh·∫•t t·ª´ danh s√°ch s√°ch
  useEffect(() => {
    const uniqueGenres = [...new Set(books.map(book => book.genre))];
    setGenres(uniqueGenres);
  }, [books]);

  // L∆∞u danh s√°ch s√°ch v√†o localStorage m·ªói khi c√≥ thay ƒë·ªïi
  useEffect(() => {
    localStorage.setItem('books', JSON.stringify(books));
  }, [books]);

  // H√†m x√≥a s√°ch
  const handleDelete = (id) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a cu·ªën s√°ch n√†y?')) {
      const updatedBooks = books.filter(book => book.id !== id);
      setBooks(updatedBooks);
      // localStorage s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª± ƒë·ªông nh·ªù useEffect
    }
  };

  // H√†m x·ª≠ l√Ω thay ƒë·ªïi input
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewBook({
      ...newBook,
      [name]: value
    });
  };

  // H√†m th√™m s√°ch m·ªõi
  const handleAddBook = () => {
    if (!newBook.title || !newBook.author || !newBook.genre || !newBook.year) {
      alert('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin s√°ch!');
      return;
    }

    const yearValue = parseInt(newBook.year);
    if (isNaN(yearValue)) {
      alert('NƒÉm ph·∫£i l√† s·ªë!');
      return;
    }

    const newBookWithId = {
      ...newBook,
      id: Date.now(),
      year: yearValue
    };

    setBooks([...books, newBookWithId]);
    // localStorage s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª± ƒë·ªông nh·ªù useEffect

    setNewBook({
      title: '',
      author: '',
      genre: '',
      year: ''
    });
  };

  // H√†m x·ª≠ l√Ω t√¨m ki·∫øm theo t√™n s√°ch
  const handleSearch = (e) => {
    setSearchTerm(e.target.value);
  };

  // H√†m x·ª≠ l√Ω l·ªçc theo th·ªÉ lo·∫°i
  const handleGenreFilter = (e) => {
    setSelectedGenre(e.target.value);
  };

  // L·ªçc s√°ch theo t·ª´ kh√≥a t√¨m ki·∫øm v√† th·ªÉ lo·∫°i
  const filteredBooks = books.filter(book => {
    // L·ªçc theo t√™n s√°ch (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
    const matchesSearchTerm = book.title.toLowerCase().includes(searchTerm.toLowerCase());

    // L·ªçc theo th·ªÉ lo·∫°i (n·∫øu c√≥ ch·ªçn th·ªÉ lo·∫°i)
    const matchesGenre = selectedGenre === '' || book.genre === selectedGenre;

    // Tr·∫£ v·ªÅ true n·∫øu th·ªèa m√£n c·∫£ hai ƒëi·ªÅu ki·ªán
    return matchesSearchTerm && matchesGenre;
  });

  return (
    <div className="max-w-6xl mx-auto px-4 py-8 bg-gray-50 min-h-screen">
      <h1 className="text-3xl font-bold mb-8 text-center text-indigo-700">
        üìö Qu·∫£n L√Ω S√°ch
      </h1>

      <BookForm
        newBook={newBook}
        onInputChange={handleInputChange}
        onAddBook={handleAddBook}
      />

      <FilterBar
        searchTerm={searchTerm}
        onSearch={handleSearch}
        selectedGenre={selectedGenre}
        onGenreFilter={handleGenreFilter}
        genres={genres}
      />

      <BookStats
        totalBooks={books.length}
        displayedBooks={filteredBooks.length}
      />

      <BookList
        books={filteredBooks}
        onDelete={handleDelete}
      />
    </div>
  );
}

export default App;